# Optimized Makefile for Rangoons Core System
# High-performance compilation with optimization flags

# Compiler and flags
CXX = g++
CXXFLAGS = -O3 -std=c++17 -pthread -march=native -mtune=native -flto -ffast-math
CXXFLAGS += -Wall -Wextra -Wpedantic -Werror
CXXFLAGS += -DNDEBUG -D_GLIBCXX_USE_CXX11_ABI=0

# Debug flags (uncomment for debugging)
# CXXFLAGS = -g -O0 -std=c++17 -pthread -Wall -Wextra -Wpedantic

# Libraries
LIBS = -lpthread -lssl -lcrypto

# Directories
SRCDIR = src
INCDIR = include
OBJDIR = obj
BINDIR = bin

# Source files
SOURCES = $(wildcard $(SRCDIR)/*.cpp)
OBJECTS = $(SOURCES:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)

# Target executable
TARGET = $(BINDIR)/rangoons-optimized

# Default target
all: directories $(TARGET)

# Create necessary directories
directories:
	@mkdir -p $(OBJDIR) $(BINDIR)

# Compile source files
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	@echo "🔨 Compiling $<..."
	@$(CXX) $(CXXFLAGS) -I$(INCDIR) -c $< -o $@

# Link executable
$(TARGET): $(OBJECTS)
	@echo "🔗 Linking $@..."
	@$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS)
	@echo "✅ Build complete: $@"

# Clean build artifacts
clean:
	@echo "🧹 Cleaning build artifacts..."
	@rm -rf $(OBJDIR) $(BINDIR)
	@echo "✅ Clean complete"

# Install dependencies (Ubuntu/Debian)
install-deps-ubuntu:
	@echo "📦 Installing dependencies for Ubuntu/Debian..."
	@sudo apt-get update
	@sudo apt-get install -y build-essential g++-9 libssl-dev libpq-dev
	@echo "✅ Dependencies installed"

# Install dependencies (CentOS/RHEL)
install-deps-centos:
	@echo "📦 Installing dependencies for CentOS/RHEL..."
	@sudo yum groupinstall -y "Development Tools"
	@sudo yum install -y openssl-devel postgresql-devel
	@echo "✅ Dependencies installed"

# Install dependencies (Windows with MSYS2)
install-deps-windows:
	@echo "📦 Installing dependencies for Windows..."
	@echo "Please install MSYS2 and run: pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-openssl"
	@echo "✅ Dependencies installed"

# Performance test
perf-test: $(TARGET)
	@echo "🚀 Running performance test..."
	@time $(TARGET) --test-mode
	@echo "✅ Performance test complete"

# Memory check
mem-check: $(TARGET)
	@echo "🧠 Running memory check..."
	@valgrind --tool=memcheck --leak-check=full $(TARGET) --test-mode
	@echo "✅ Memory check complete"

# Profile build
profile: CXXFLAGS += -pg
profile: clean $(TARGET)
	@echo "📊 Profile build complete"

# Release build
release: CXXFLAGS += -DRELEASE_BUILD
release: clean $(TARGET)
	@echo "🚀 Release build complete"

# Debug build
debug: CXXFLAGS = -g -O0 -std=c++17 -pthread -Wall -Wextra -Wpedantic -DDEBUG_BUILD
debug: clean $(TARGET)
	@echo "🐛 Debug build complete"

# Static analysis
analyze:
	@echo "🔍 Running static analysis..."
	@cppcheck --enable=all --std=c++17 $(SRCDIR)
	@echo "✅ Static analysis complete"

# Format code
format:
	@echo "🎨 Formatting code..."
	@clang-format -i $(SRCDIR)/*.cpp $(INCDIR)/*.h
	@echo "✅ Code formatting complete"

# Install systemd service (Linux)
install-service: $(TARGET)
	@echo "📦 Installing systemd service..."
	@sudo cp $(TARGET) /usr/local/bin/rangoons
	@sudo cp scripts/rangoons.service /etc/systemd/system/
	@sudo systemctl daemon-reload
	@sudo systemctl enable rangoons
	@echo "✅ Service installed and enabled"

# Start service
start-service:
	@echo "🚀 Starting Rangoons service..."
	@sudo systemctl start rangoons
	@echo "✅ Service started"

# Stop service
stop-service:
	@echo "🛑 Stopping Rangoons service..."
	@sudo systemctl stop rangoons
	@echo "✅ Service stopped"

# Service status
service-status:
	@echo "📊 Service status:"
	@sudo systemctl status rangoons

# Docker build
docker-build:
	@echo "🐳 Building Docker image..."
	@docker build -t rangoons-core:latest .
	@echo "✅ Docker image built"

# Docker run
docker-run:
	@echo "🐳 Running Docker container..."
	@docker run -d -p 8080:8080 --name rangoons-core rangoons-core:latest
	@echo "✅ Docker container running"

# Docker stop
docker-stop:
	@echo "🛑 Stopping Docker container..."
	@docker stop rangoons-core
	@docker rm rangoons-core
	@echo "✅ Docker container stopped"

# Help
help:
	@echo "🚀 Rangoons Core - Build System"
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Build optimized executable (default)"
	@echo "  clean            - Remove build artifacts"
	@echo "  install-deps-*   - Install system dependencies"
	@echo "  perf-test        - Run performance test"
	@echo "  mem-check        - Run memory leak check"
	@echo "  profile          - Build with profiling enabled"
	@echo "  release          - Build release version"
	@echo "  debug            - Build debug version"
	@echo "  analyze          - Run static code analysis"
	@echo "  format           - Format source code"
	@echo "  install-service  - Install systemd service"
	@echo "  start-service    - Start systemd service"
	@echo "  stop-service     - Stop systemd service"
	@echo "  service-status   - Show service status"
	@echo "  docker-*         - Docker operations"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Environment variables:"
	@echo "  CXX              - C++ compiler (default: g++)"
	@echo "  CXXFLAGS         - Compiler flags"
	@echo "  LIBS             - Linker libraries"

# Phony targets
.PHONY: all clean install-deps-ubuntu install-deps-centos install-deps-windows
.PHONY: perf-test mem-check profile release debug analyze format
.PHONY: install-service start-service stop-service service-status
.PHONY: docker-build docker-run docker-stop help directories

# Print build info
info:
	@echo "🔧 Build Configuration:"
	@echo "  Compiler: $(CXX)"
	@echo "  Flags: $(CXXFLAGS)"
	@echo "  Libraries: $(LIBS)"
	@echo "  Source directory: $(SRCDIR)"
	@echo "  Include directory: $(INCDIR)"
	@echo "  Object directory: $(OBJDIR)"
	@echo "  Binary directory: $(BINDIR)"
	@echo "  Target: $(TARGET)"
	@echo "  Sources: $(SOURCES)"
	@echo "  Objects: $(OBJECTS)"
